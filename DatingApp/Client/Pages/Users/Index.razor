@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Users</h3>
<a href="/users/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New User
</a>
<br />
<br />


@if (Users == null)
{
    <div class="alert alert-info">Loading Users...</div> }
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Username</th>
                <th>Age</th>
                <th>Pronouns</th>
                <th>Gender</th>
                <th>Gender Preference</th>
                <th>Age Preferenece</th>
                <th>Location</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Age</td>
                    <td>@user.Pronouns</td>
                    <td>@user.Gender</td>
                    <td>@user.GenderPreference</td>
                    <td>@user.AgePreference</td>
                    <td>@user.Location</td>
                    <td>
                        <a href="/users/view/@user.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/users/edit/@user.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>}

@code {
    private List<User> Users;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
    }
    async Task Delete(int userId)
    {
        var user = Users.First(q => q.Id == userId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.Username}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.UsersEndpoint}/{userId}");
            await OnInitializedAsync();

        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();

    }

}
