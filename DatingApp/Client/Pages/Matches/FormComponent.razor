@inject HttpClient _client

<EditForm Model="@match" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Matcher: </label>
            <div>
                <InputSelect @bind-Value="match.MatcherId" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
<option value="@user.Id">@user.Username</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => match.MatcherId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Matchee: </label>
            <div>
                <InputSelect @bind-Value="match.MatcheeId" class="form-control">
                    <option value="">-- Select Model --</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
<option value="@user.Id">@user.Username</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => match.MatcheeId)" />
            </div>
        </div>

        

       
    </fieldset>
    @if (!Disabled)
    {
<button type="submit" class="btn btn-success btn-block">
    @ButtonText
</button>
    }
    <BackToList Target="matches" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Match match { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<User> Users;

    protected async override Task OnInitializedAsync()
    {
        
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

    } }