@page "/matches/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Matches</h3>
<a href="/matches/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Match
</a>
<br />
<br />


@if (Matches == null)
{
    <div class="alert alert-info">Loading Matches...</div> }
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Match</th>
                <th>Date Matched</th>
                <th>MatcheeId</th>
                <th>MatcherId</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var match in Matches)
            {        
            <tr>
                <td>@match.Id</td>
                <td>@match.DateMatched.Date.ToString("dd MMMM yyyy")</td>
                <td>@match.MatcheeId</td>
                <td>@match.MatcherId</td>
                <td>
                    <a href="/matches/view/@match.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/matches/edit/@match.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(match.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>}

@code {
    private List<Match> Matches;

    protected async override Task OnInitializedAsync()
    {
        Matches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");
    }
    async Task Delete(int matchId)
    {
        var match = Matches.First(q => q.Id == matchId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {match.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MatchesEndpoint}/{matchId}");
            await OnInitializedAsync();

        }
    }

}
