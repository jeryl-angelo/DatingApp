@page "/complaints/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Complaints</h3>

<br />
<br />


@if (Complaints == null)
{
    <div class="alert alert-info">Loading Complaints...</div> }
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Complaint</th>
                <th>Conversation Id</th>
                <th>Reason</th>
                <th>Status</th>
                <th>Staff</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var complaint in Complaints)
            {
            <tr>
                <td>@complaint.Id</td>
                <td>@complaint.ConversationId</td>
                <td>@complaint.ComplaintReason</td>
                <td>@complaint.ComplaintStatus</td>
                <td>@complaint.Staff.StaffName</td>

                <td>
                    <a href="/complaints/view/@complaint.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/complaints/edit/@complaint.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(complaint.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>}

@code {
    private List<Complaint> Complaints;


    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Complaints = await _client.GetFromJsonAsync<List<Complaint>>($"{Endpoints.ComplaintsEndpoint}");

    }
    async Task Delete(int complaintId)
    {
        var complaint = Complaints.First(q => q.Id == complaintId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {complaint.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ComplaintsEndpoint}/{complaintId}");
            await OnInitializedAsync();

        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

}
