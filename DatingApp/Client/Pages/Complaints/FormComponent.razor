@inject HttpClient _client

<EditForm Model="@complaint" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Reason: </label>
            <div>
                <InputText @bind-Value="@complaint.ComplaintReason" class="form-control" />
                <ValidationMessage For="@(() => complaint.ComplaintReason)" />
            </div>
        </div>
        <div class="form-group">
            <label>Status: </label>
            <div>
                <InputCheckbox @bind-Value="@complaint.ComplaintStatus" class="form-control" />
                <ValidationMessage For="@(() => complaint.ComplaintStatus)" />
            </div>
        </div>
        <div class="form-group">
            <label>Staff: </label>
            <div>
                <InputSelect @bind-Value="complaint.StaffId" class="form-control">
                    <option value="">-- Select Staff --</option>
                    @if (Staffs != null)
                    {
                        foreach (var complaint in Staffs)
                        {
<option value="@complaint.Id">@complaint.StaffName</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => complaint.StaffId)" />
            </div>
        </div>

    </fieldset>
    @if (!Disabled)
    {
<button type="submit" class="btn btn-success btn-block">
    @ButtonText
</button>}
    <BackToList Target="complaints" />
</EditForm>

@code { private IList<Staff> Staffs;

            [Parameter] public bool Disabled { get; set; } = false;
            [Parameter] public Complaint complaint { get; set; }
            [Parameter] public string ButtonText { get; set; } = "Save";
            [Parameter] public EventCallback OnValidSubmit { get; set; }

            protected async override Task OnInitializedAsync()
            {
                Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");


            }



}