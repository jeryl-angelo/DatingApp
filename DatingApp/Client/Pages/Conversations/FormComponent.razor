@inject HttpClient _client

<EditForm Model="@conversation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Sender: </label>
            <div>
                <InputSelect @bind-Value="conversation.SenderId" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
<option value="@user.Id">@user.Username</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => conversation.SenderId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Receiver: </label>
            <div>
                <InputSelect @bind-Value="conversation.ReceiverId" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (Users != null)
                    {
                        foreach (var user in Users)
                        {
<option value="@user.Id">@user.Username</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => conversation.ReceiverId)" />
            </div>
        </div>




    </fieldset>
    @if (!Disabled)
    {
<button type="submit" class="btn btn-success btn-block">
    @ButtonText
</button>}
    <BackToList Target="conversations" />
</EditForm>

@code { [Parameter] public bool Disabled { get; set; } = false;
            [Parameter] public Conversation conversation { get; set; }
            [Parameter] public string ButtonText { get; set; } = "Save";
            [Parameter] public EventCallback OnValidSubmit { get; set; }

            private IList<User> Users;

            protected async override Task OnInitializedAsync()
            {

                Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

            } }