@inject HttpClient _client

<EditForm Model="@message" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Message: </label>
            <div>
                <InputText @bind-Value="@message.MessageText" class="form-control" />
                <ValidationMessage For="@(() => message.MessageText)" />
            </div>
        </div>

        <div class="form-group">
            <label>Conversation: </label>
            <div>
                <InputSelect @bind-Value="message.ConversationId" class="form-control">
                    <option value="">-- Select Conversation --</option>
                    @if (Conversations != null)
                    {
                        foreach (var conversation in Conversations)
                        {
<option value="@conversation.Id">@conversation.Sender.Username to @conversation.Receiver.Username</option>}
}
                </InputSelect>
                <ValidationMessage For="@(() => message.ConversationId)" />
            </div>
        </div>




    </fieldset>
    @if (!Disabled)
    {
<button type="submit" class="btn btn-success btn-block">
    @ButtonText
</button>}
    <BackToList Target="messages" />
</EditForm>

@code { [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Conversation> Conversations;

    protected async override Task OnInitializedAsync()
    {

        Conversations = await _client.GetFromJsonAsync<List<Conversation>>($"{Endpoints.ConversationsEndpoint}");

    } }